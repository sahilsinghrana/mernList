{"version":3,"sources":["components/AppNavbar.js","actions/itemActions.js","actions/types.js","components/ShoppingList.js","components/ItemModal.js","reducers/itemReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["AppNavBar","state","isOpen","toggle","setState","Navbar","color","dark","expand","className","Container","NavbarBrand","href","NavbarToggler","onClick","this","Collapse","navbar","Nav","NavItem","NavLink","Component","setItemsLoading","type","ShoppingList","onDeleteClick","id","props","deleteItem","getItems","items","item","ListGroup","TransitionGroup","map","_id","name","CSSTransition","key","timeout","classNames","ListGroupItem","Button","size","bind","connect","dispatch","axios","get","then","res","payload","data","delete","ItemModal","modal","onChange","e","target","value","onSubmit","preventDefault","newItem","addItem","style","marginBottom","Modal","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","autofocus","autoComplete","placeholder","marginTop","block","post","initialState","loading","combineReducers","action","filter","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","window","__REDUX_DEVTOOLS_EXTENSION__","App","AppNavbar","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.43ae4de2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  Container,\r\n} from \"reactstrap\";\r\n\r\nclass AppNavBar extends Component {\r\n  state = {\r\n    isOpen: false,\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Navbar color=\"dark\" dark expand=\"sm\" className=\"mb-5\">\r\n          <Container>\r\n            <NavbarBrand href=\"/\">Some List For Something</NavbarBrand>\r\n            <NavbarToggler onClick={this.toggle} />\r\n            <Collapse isOpen={this.state.isOpen} navbar>\r\n              <Nav className=\"ml-auto\" navbar>\r\n                <NavItem>\r\n                  <NavLink href=\"http://github.com/sahilsinghrana\">Git</NavLink>\r\n                </NavItem>\r\n              </Nav>\r\n            </Collapse>\r\n          </Container>\r\n        </Navbar>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AppNavBar;\r\n","import axios from \"axios\";\r\nimport {\r\n  GET_ITEMS,\r\n  ADD_ITEM,\r\n  DELETE_ITEM,\r\n  ITEMS_LOADING,\r\n} from \"../actions/types\";\r\n\r\nexport const getItems = () => (dispatch) => {\r\n  dispatch(setItemsLoading());\r\n\r\n  axios.get(\"/api/items\").then((res) =>\r\n    dispatch({\r\n      type: GET_ITEMS,\r\n      payload: res.data,\r\n    })\r\n  );\r\n};\r\n\r\nexport const deleteItem = (id) => (dispatch) => {\r\n  axios.delete(`/api/items/${id}`).then((res) =>\r\n    dispatch({\r\n      type: DELETE_ITEM,\r\n      payload: id,\r\n    })\r\n  );\r\n};\r\n\r\nexport const addItem = (item) => (dispatch) => {\r\n  axios.post(\"/api/items\", item).then((res) =>\r\n    dispatch({\r\n      type: ADD_ITEM,\r\n      payload: res.data,\r\n    })\r\n  );\r\n};\r\n\r\nexport const setItemsLoading = () => {\r\n  return {\r\n    type: ITEMS_LOADING,\r\n  };\r\n};\r\n","export const GET_ITEMS = \"GET_ITEMS\";\r\nexport const ADD_ITEM = \"ADD_ITEM\";\r\nexport const DELETE_ITEM = \"DELETE_ITEM\";\r\nexport const ITEMS_LOADING = \"ITEMS_LOADING\";\r\n","import React, { Component } from \"react\";\r\nimport { Container, ListGroup, ListGroupItem, Button } from \"reactstrap\";\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport { connect } from \"react-redux\";\r\nimport { getItems, deleteItem } from \"../actions/itemActions\";\r\nimport { PropTypes } from \"prop-types\";\r\n\r\nclass ShoppingList extends Component {\r\n  componentDidMount() {\r\n    this.props.getItems();\r\n  }\r\n\r\n  onDeleteClick = (id) => {\r\n    this.props.deleteItem(id);\r\n  };\r\n\r\n  render() {\r\n    const { items } = this.props.item;\r\n\r\n    return (\r\n      <Container>\r\n        <ListGroup>\r\n          <TransitionGroup className=\"shopping-list\">\r\n            {items.map(({ _id, name }) => (\r\n              <CSSTransition key={_id} timeout={500} classNames=\"fade\">\r\n                <ListGroupItem>\r\n                  <Button\r\n                    className=\"remove-btn\"\r\n                    color=\"danger\"\r\n                    size=\"sm\"\r\n                    onClick={this.onDeleteClick.bind(this, _id)}\r\n                  >\r\n                    &times;\r\n                  </Button>\r\n                  {name}\r\n                </ListGroupItem>\r\n              </CSSTransition>\r\n            ))}\r\n          </TransitionGroup>\r\n        </ListGroup>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nShoppingList.propTypes = {\r\n  getItems: PropTypes.func.isRequired,\r\n  item: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  item: state.item,\r\n});\r\nexport default connect(mapStateToProps, { getItems, deleteItem })(ShoppingList);\r\n","import React, { Component } from \"react\";\r\nimport {\r\n  Button,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  Form,\r\n  FormGroup,\r\n  Label,\r\n  Input,\r\n} from \"reactstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { addItem } from \"../actions/itemActions\";\r\n// import { v4 as uuid } from \"uuid\";\r\nclass ItemModal extends Component {\r\n  state = {\r\n    modal: false,\r\n    name: \"\",\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState({\r\n      modal: !this.state.modal,\r\n    });\r\n  };\r\n\r\n  onChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value,\r\n    });\r\n  };\r\n\r\n  onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newItem = {\r\n      name: this.state.name,\r\n    };\r\n\r\n    //add Item via addItem action\r\n    this.props.addItem(newItem);\r\n\r\n    //close Modal\r\n    this.toggle();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          color=\"dark\"\r\n          style={{ marginBottom: \"2rem\" }}\r\n          onClick={this.toggle}\r\n        >\r\n          Add Item\r\n        </Button>\r\n        <Modal isOpen={this.state.modal} toggle={this.toggle}>\r\n          <ModalHeader toggle={this.toggle}>Add Item to the List</ModalHeader>\r\n          <ModalBody>\r\n            <Form onSubmit={this.onSubmit}>\r\n              <FormGroup>\r\n                <Label for=\"item\">Item</Label>\r\n                <Input\r\n                  autofocus\r\n                  autoComplete=\"off\"\r\n                  type=\"text\"\r\n                  name=\"name\"\r\n                  id=\"item\"\r\n                  placeholder=\"Enter the name of item\"\r\n                  onChange={this.onChange}\r\n                />\r\n                <Button color=\"dark\" style={{ marginTop: \"2rem\" }} block>\r\n                  Add Item\r\n                </Button>\r\n              </FormGroup>\r\n            </Form>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  item: state.item,\r\n});\r\n\r\nexport default connect(mapStateToProps, { addItem })(ItemModal);\r\n","import {\r\n  GET_ITEMS,\r\n  ADD_ITEM,\r\n  DELETE_ITEM,\r\n  ITEMS_LOADING,\r\n} from \"../actions/types\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  loading: false,\r\n};\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_ITEMS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n        loading: false,\r\n      };\r\n    case DELETE_ITEM:\r\n      return {\r\n        ...state,\r\n        items: state.items.filter((item) => item._id !== action.payload),\r\n      };\r\n    case ADD_ITEM:\r\n      return {\r\n        ...state,\r\n        items: [action.payload, ...state.items],\r\n      };\r\n    case ITEMS_LOADING:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport itemReducer from \"./itemReducer\";\r\n\r\nexport default combineReducers({\r\n  item: itemReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(\r\n    applyMiddleware(...middleware),\r\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n  )\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport AppNavbar from \"./components/AppNavbar\";\nimport ShoppingList from \"./components/ShoppingList\";\nimport ItemModal from \"./components/ItemModal\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { Container } from \"reactstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div className=\"App\">\n        <AppNavbar />\n        <Container>\n          <ItemModal />\n          <ShoppingList />\n        </Container>\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}